/**
 * Copyright (c) 2015 Derek MacDonald <derekmd@hotmail.com>
 * 
 * categorizable-map - A very opinionated implementation to display a categorized list of location markers in a Google Map.
 * @version v1.0.0
 * @link http://derekmd.com/
 * @license MIT
 */
! function () {
    var t = !1,
        o = /xyz/.test(function () {}) ? /\b_super\b/ : /.*/;
    this.Class = function () {}, Class.extend = function (e) {
        function i() {
            !t && this.init && this.init.apply(this, arguments)
        }
        var n = this.prototype;
        t = !0;
        var s = new this;
        t = !1;
        for (var a in e) s[a] = "function" == typeof e[a] && "function" == typeof n[a] && o.test(e[a]) ? function (t, o) {
            return function () {
                var e = this._super;
                this._super = n[t];
                var i = o.apply(this, arguments);
                return this._super = e, i
            }
        }(a, e[a]) : e[a];
        return i.prototype = s, i.prototype.constructor = i, i.extend = arguments.callee, i
    }
}();
var MobileTouchDisabler = function (t) {
        this.canDrag = !1, this.start = 0, this.end = 0;
        var o = function (t) {
                this.canDrag = !0, this.start = t.originalEvent.touches[0].pageY
            },
            e = function () {
                this.canDrag = !1
            },
            i = function (t) {
                this.canDrag && (this.end = t.originalEvent.touches[0].pageY, window.scrollBy(0, this.start - this.end))
            };
        $(t).bind("touchstart", o), $(t).bind("touchend", e), $(t).bind("touchmove", i)
    },
    CategorizableMap = Class.extend({
        options: {
            isInitialized: !1,
            latLng: new google.maps.LatLng(29.7808696, -95.5612213),
            mapOptions: {},
            markers: {},
            categories: {},
            scrollwheel: !0,
            zoom: 5,
            style: [
                {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
                {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
                {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
                {
                  featureType: 'administrative.locality',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'poi',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'geometry',
                  stylers: [{color: '#263c3f'}]
                },
                {
                  featureType: 'poi.park',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#6b9a76'}]
                },
                {
                  featureType: 'road',
                  elementType: 'geometry',
                  stylers: [{color: '#38414e'}]
                },
                {
                  featureType: 'road',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#212a37'}]
                },
                {
                  featureType: 'road',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#9ca5b3'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry',
                  stylers: [{color: '#746855'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'geometry.stroke',
                  stylers: [{color: '#1f2835'}]
                },
                {
                  featureType: 'road.highway',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#f3d19c'}]
                },
                {
                  featureType: 'transit',
                  elementType: 'geometry',
                  stylers: [{color: '#2f3948'}]
                },
                {
                  featureType: 'transit.station',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#d59563'}]
                },
                {
                  featureType: 'water',
                  elementType: 'geometry',
                  stylers: [{color: '#17263c'}]
                },
                {
                  featureType: 'water',
                  elementType: 'labels.text.fill',
                  stylers: [{color: '#515c6d'}]
                },
                {
                  featureType: 'water',
                  elementType: 'labels.text.stroke',
                  stylers: [{color: '#17263c'}]
                }
              ]
        },
        init: function (t, o) {
            return this.el = t, this.$el = t, this.options = $.extend({}, this.options, o), "undefined" != typeof google && "undefined" != typeof google.maps && this.initializeMap(), this
        },
        initializeMap: function () {
            var t = {
                center: this.options.latLng,
                scrollwheel: this.options.scrollwheel,
                zoom: this.options.zoom
            };
            t = $.extend({}, this.options.mapOptions, t);
            var o = new google.maps.Map($(this.el).get(0), t);
            this.options.style && this.options.style.length > 0 && o.setOptions({
                styles: this.options.style
            }), "ontouchend" in document && !this.options.scrollwheel && (o.setOptions({
                draggable: !1
            }), new MobileTouchDisabler(o));
            var e = this;
            google.maps.event.addListener(o, "tilesloaded", function () {
                e.options.isInitialized || (e.showRequestedMarkers(), e.options.useGeolocation && e.discoverLatLng(), e.options.isInitialized = !0)
            }), this.googleMap = o
        },
        discoverLatLng: function () {
            var t = this;
            navigator.geolocation && navigator.geolocation.getCurrentPosition(function (o) {
                var e = o.coords.latitude,
                    i = o.coords.longitude;
                t.setCenter(e, i)
            })
        },
        setCenter: function (t, o) {
            if (this.googleMap) {
                var e = new google.maps.LatLng(t, o);
                this.googleMap.setCenter(e)
            }
        },
        addCategory: function (t, o) {
            return "undefined" == typeof o ? "object" == typeof t && null !== t && (this.options.markers = [], this.options.categories = t) : (this.options.categories[t] = o, this.options.markers[t] = []), this
        },
        addMarker: function (t, o, e, i, n, s) {
            var a = /^-?\d*(\.\d+)?$/;
            null !== a.exec(t) && null !== a.exec(o) && (s = n, n = i, i = e, e = o, o = t, t = null);
            var r = new google.maps.LatLng(o, e),
                l = {
                    position: r,
                    map: this.googleMap,
                    title: i.name,
                    visible: !0 === n
                };
            t in this.options.categories && (l.icon = this.options.categories[t]), !n || s !== google.maps.Animation.DROP && s !== google.maps.Animation.BOUNCE || (l.animation = s);
            var g = new google.maps.Marker(l);
            t in this.options.categories ? this.options.markers[t][this.options.markers[t].length] = g : ($.isEmptyObject(this.options.categories) && this.clearCategories(), this.options.markers[this.options.markers.length] = g);
            var h = new google.maps.InfoWindow({
                    content: this.getLocationHtml(i)
                }),
                c = this;
            return google.maps.event.addListener(g, "click", function () {
                g.infoWindow ? (g.infoWindow.close(), g.infoWindow = null) : (h.open(c.googleMap, g), g.infoWindow = h, c.hideVisibleInfoWindow(g))
            }), this
        },
        getLocationHtml: function (t) {
            var o = "<h4>" + t.name + "</h4>";
            t.address && t.address.length > 0 && (o += t.address + "<br>");
            var e = "";
            t.suburb && t.suburb.length > 0 && (e += t.suburb + " "), t.state && t.state.length > 0 && (e += t.state + " "), t.postcode && t.postcode.length > 0 && (e += t.postcode), e = $.trim(e), e.length > 0 && (o += e + "<br>"), t.url && t.url.length > 0 && "http://" !== t.url && (o += '<a href="' + t.url + '" target="_blank">' + t.url + "</a><br>");
            var i = "";
            return t.address && t.suburb && t.state && t.postcode && (i = $.trim(t.address + " " + t.suburb + " " + t.state + " " + t.postcode)), 0 === i.length && t.map && (i = $.trim(t.map)), i.length > 0 && (o += '<br><div class="google-map-infowindow-actions"><a href="https://maps.google.com?daddr=' + encodeURIComponent(i) + '">Get directions</a></div>'), o
        },
        hideVisibleInfoWindow: function (t) {
            for (var o = this.getMarkers(), e = 0; e < o.length; e++) {
                var i = o[e];
                i !== t && i.infoWindow && (i.infoWindow.close(), i.infoWindow = null)
            }
            return this
        },
        getMarkers: function () {
            var t;
            if ("undefined" != typeof this.options.markers.length) t = this.options.markers;
            else {
                t = [];
                for (var o in this.options.markers)
                    for (var e = 0; e < this.options.markers[o].length; e++) t[t.length] = this.options.markers[o][e]
            }
            return t
        },
        getCategories: function () {
            return $.map(this.options.categories, function (t, o) {
                return o
            })
        },
        toggleCategory: function (t, o) {
            if (t in this.options.markers)
                for (var e = this.options.markers[t], i = 0; i < e.length; i++) {
                    var n = e[i];
                    n.getVisible() || o !== google.maps.Animation.DROP && o !== google.maps.Animation.BOUNCE || (n.setAnimation(o), function (t) {
                        setTimeout(function () {
                            t.setAnimation(null)
                        }, 1400)
                    }(n)), n.setVisible(!n.getVisible())
                }
            $('[data-location-category="' + t + '"]').toggleClass("active")
        },
        toggleCategories: function () {
            var t = this,
                o = [];
            $("[data-location-category]").each(function () {
                var e = $(this).data("location-category"); - 1 === $.inArray(e, o) && (t.toggleCategory(e), o[o.length] = e)
            })
        },
        clearCategories: function () {
            this.options.markers = [], this.options.categories = []
        },
        showRequestedMarkers: function () {
            if (document.location.hash.length > 0 && $("[data-location-category]:visible").size() > 0) {
                var t = document.location.hash.substring(1);
                $.inArray(t, this.getCategories()) > -1 ? this.toggleCategory(t) : this.toggleCategories()
            } else this.toggleCategories()
        },
        zoomToMarkers: function () {
            var t = new google.maps.LatLngBounds,
                o = this.getMarkers();
            for (var e in o) t.extend(o[e].getPosition());
            this.googleMap.fitBounds(t)
        }
    });